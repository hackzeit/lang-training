Introducción a C/C++
Proceso de compilación

Frank Moreno
Geckoer en Geckotronics
@kranfix

* ¿Qué es compilación?
La compilación es el proceso mediante el código de fuente se convierte en un
archivo binario (o ejecutable).

Para esta tarea existen algunos software llamados compiladores que ejecutan
la tarea descrita.

Los compiladores más conocidos son:

Linux y OS X:

  GCC - GNU Compiller Collection
  G++ - Compillador de C++ parte de GCC

Windows:

  MinGW - Versión de GCC para Windows
  Visual C++ compiller

* Comando de compilación básico
El formato para compilar un código en C++ simple es el siguiente:

  g++ [-o <nombre del ejecutable>]  <nombre del archivo>.cpp

En el caso de windows, es necesario escribir `g++.exe` en lugar de `g++`.

Notas:

- Lo que está entre corchetes `[]` es opcional.
- Si no aparece -o <nombre del archivo del ejecutable>, la salida será:
  - En Linux y OS X:  a.out
  - En Windows: a.exe

** Antes de compilar
Hay que asegurarse que tengamos el compilador y saber en qué ruta se encuentra.

En Linux:

  export PATH=$PATH:/usr/bin

En Windows:

  path %path%;c:\Dev-Cpp\bin

* Primer ejemplo de compilación
Dado archivo `hola.cpp` con el ejemplo de `hola mundo`:

.code hola/hola.cpp

Generamos un archivo ejecutable con el siguiente formato:

  g++ -o hola hola.cpp

** Ejecutar ejemplo simple

Ubicarse en la carpera del ejecutable, escribir:

- En Linux:

  ./hola

  /ruta/completa/del/ejecutable/hola

- En windows:

  hola.exe
   
  D:\ruta\completa\del\ejecutable\hola.exe

** Ejemplo más complejo de compilación

Para este ejemplo crearemos un proyecto con esta estructura de archivos:

  ├── projecto
    │ ├── aritmetica.h
    │ ├── aritmetica.cpp
    │ ├── main.cpp
    │ ├── include
    │ │   ├── imprimir.h
    │ └── src
    │     ├── imprimir.cpp


Notar que tenemos:

  - Bibliotecas:
    - aritmetica: `aritmetica.h` y `aritmetica.cpp`
    - imprimir: `include/imprimir.h` e `src/imprimir.cpp`
  - Código principal: `main.cpp`

Pasaremos a mostrar algunos comandos para compilar el proyecto desde consola.
Pero primero veamos el contenido de los archivos.

** Biblioteca aritmetica

Archivo aritmética.h (header o cabecera):

.code compilation/aritmetica.h

Archivo aritmetica.cpp

.code compilation/aritmetica.cpp

Nota:

- No hay función main.
- Por lo que su compilado no tiene ejecutable.
- Los archivos están en la misma carpeta.

** Biblioteca imprimir

Archivo include/imprimir.h

.code compilation/include/imprimir.h

Archivo src/imprimir.cpp

.code compilation/src/imprimir.cpp

** Archivo main

En el archivo main usamos deifinimos todas las funciones ya creadas:

.code compilation/main.cpp

Nota:

- Funciones suma y resta están en aritmetica.h
- Función imprimir está en include/imprimir.h

* Compilación por código de fuente

Solo con el código de fuente

  ejem: main.cpp aritmetica.cpp src/imprimir.cpp
  	  g++ -o ejem main.cpp aritmetica.cpp src/imprimir.cpp -Iinclude

Con `-Iinclude` estamos indicando que buscará archivos `.h` dentro de include.
Y en este caso es necesitado por `main.cpp` y `src/imprimir.cpp`.

Esta forma de compilación tiene una deficiencia, la cual es que si hay algún
error de compilación, hay que volver a compilar todo trás corregirlo.

* Compilación juntando código y archivos objeto

** Archivos tipo objeto

Esto archivos son el resultado de una compilación de código de fuente donde
no se definido la función `int main()`.

Para compilarlos se usa la siguiente estructura:

   g++ -c fuente1.cpp fuente2.cpp archivo1.o [-o <salida.o>]

De no especificar <salida.o>, tendrá el mismo nombre que el primer archivo
`.cpp`. En este caso la salida sería `fuente1.o`.

** Compilemos aritmetica

  aritmetica.o: aritmetica.cpp aritmetica.h
  	  g++ -c aritmetica.cpp [-o aritmetica.o]

El flag `-c` indica que la salida es un código tipo objeto el cual no es
ejecutable (y no lo es porque no tiene función).

** Compilemos imprimir

  src/imprimir.o: src/imprimir.cpp include/imprimir.h
          cd src                            # Nos movemos a la carpeta src
          g++ -c imprimir.cpp -I../include  # Estamos en la carpeta src
          cd ..                             # regresamos al proyecto

No especificamos la salida. Se crea el archivo `imprimir.o`.

Dado que en `imprimir.cpp` se llama la biblioteca `imprimir.h` así:

  #include <imprimir.h> // Se encuentra en ../include respecto a src

El compilador no sabe donde encontrarla. Pero se le indice con `-I../include`.

** Compilemos el ejecutabe

  ejem: main.cpp aritmetica.o src/imprimir.o
          g++ -o ejem main.cpp aritmetica.o src/imprimir.o

O también:

  main.o: main.cpp aritmetica.h include/imprimir.h
          g++ -c main.cpp

y luego:

  ejem: main.o aritmetica.o src/imprimir.o
          g++ -o ejem main.o aritmetica.o src/imprimir.o

Notar que `main.cpp` también llama a `include/imprimir.h` pero lo hace así:

  #include "include/imprimir.h" // se especifica la carpeta include
